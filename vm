#!/bin/bash

COMMAND=$1
SCRIPT=`basename "$0"`
declare -a SUPPORTED_COMMANDS=(up destroy reup run ssh)
command_list=$(printf ", %s" "${SUPPORTED_COMMANDS[@]}")
GREEN='\033[0;32m'
NC='\033[0m' # No Color

function log {
    echo -e "${GREEN}[${SCRIPT}] => ${1}${NC}"
}

function command_not_found {
    log "One of the following arguments was expected but not supplied: ${command_list:2}"
    exit 1
}

function run() {
    log "Now executing: ${@}"
    $(${@})
}

function ssh_exec_no_log() {
    eval "ssh -t -o StrictHostKeyChecking=no -i .vagrant/machines/kube_local/virtualbox/private_key -p 2222 vagrant@localhost \"${*}\""
}

function ssh_exec() {
    log "Now executing: ${*}"
    ssh_exec_no_log ${*}
}

# guard clause for unexpected commands
if [ -z "${COMMAND}" ] || [[ ! "${SUPPORTED_COMMANDS[@]}" =~ "${COMMAND}" ]]
then
    command_not_found
fi

# set working directory as parent directory of script
cd "$(dirname "$0")"

# retrieves the IP of the local VM
function get_ip {
    ssh_exec_no_log ifconfig eth1 | grep Mask | awk '{print $2}'| cut -f2 -d:
}

# vm management functions
function vm_up {
    log "Provisioning local VM (vagrant up)..."

    # launch vm
    vagrant up --provider=virtualbox

    # Install a pod network
    # As per the official docs you need to install a CNI-based pod network add-on. I went for the Weave network one and so far, so good.
    # Use vagrant ssh to get onto the VM where you can run kubectl commands.
    ssh_exec "kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

    # Allow pods to run on the master node
    # By default master nodes get a taint which prevents regular workloads being scheduled on them. Since we only have one node in this cluster,
    # we want to remove that taint.
    ssh_exec "kubectl taint nodes --all node-role.kubernetes.io/master-"

    # copy kube config to admin.conf file
    ssh_exec_no_log "cat /home/vagrant/.kube/config" > admin.conf

    # replace the internal IP address with the IP accessible by the host
    sed -i '' -e "s|\(server: https://\)\(.*\):|\1`get_ip`:|g" admin.conf

    echo -e "\n*******************\n${GREEN}Run the following command to connect to kube from your local machine:\n     kubectl --kubeconfig ./admin.conf get nodes${NC}"
}

function vm_destroy {
    # set the vm name
    VM=kube_local

    # stop the vm if it is found to be running
    if VBoxManage list runningvms | grep $VM; then VBoxManage controlvm ${VM} poweroff; fi

    # delete the vm if it is present on the host
    if VBoxManage list vms | grep $VM; then VBoxManage unregistervm --delete ${VM}; fi

    # remove vm entry from known_hosts file
    ssh-keygen -R [localhost]:2222

    # clear vagrant machine cache
    vagrant global-status --prune

    # remove vagrant files
    rm -rf ./.vagrant
}

if [ $COMMAND == "up" ]
then
    vm_up
elif [ $COMMAND == "destroy" ]
then
    vm_destroy
elif [ $COMMAND == "reup" ]
then
    vm_destroy
    vm_up
elif [ $COMMAND == "run" ]
then
    # pass all additional args to docker cli
    ssh_exec "${@:2}"
elif [ $COMMAND == "ssh" ]
then
    ssh -t -o StrictHostKeyChecking=no -i .vagrant/machines/kube_local/virtualbox/private_key -p 2222 vagrant@localhost
else
    command_not_found
fi
